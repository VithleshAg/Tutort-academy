Q1 - You are given a singly linked list and pointer which is pointing to the node which is required to be deleted. Any information about the head pointer or any other node is not given. You need to write a function to delete that node from the linked list. Your function will take only one argument, i.e., a pointer to the node which is to be delete
 
function deleteNode(node){
	node.value = node.next.value;
	node.next = node.next.next;
}


Q2 - Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

Ex:

1-2-3-4
7-8-2-3-4
Res: 2

// BruteForce
function findeIntersection(headA, headB){
	while(headA){
		headA.val = Math.max();
		headA = headA.next;
	}
	
	while(headB){
		if(headB.val === Math.max()) return headB;
		headB = headB.next;
	}
	
	return null;
}


function findeIntersection(headA, headB){
	let headALen = 0;
	let tempA = headA;
	while(tempA){
		tempA = tempA.next;
		headALen++
	}
	
	let headBLen = 0;
	let tempB = headB;
	while(tempB){
		tempB = tempB.next;
		headBLen++
	}
	
	tempA = headA;
	tempB = headB;
	
	for(let i=0; i<(headALen-headBLen); i++) tempA = tempA.next;
	for(let i=0; i<(headBLen-headALen); i++) tempB = tempB.next;
	
	while(tempA){
		if(tempA===tempB) return tempA;
		tempA = tempA.next;
		tempB = tempB.next;
	}
	
	return null;
}




Q3 - Given the heads of two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
l1 = [2,4,3]
l2 = [5,6,4]

Result: sum = 807; L = [7,0,8]


function sum(l1, l2){
	let carry = 0;
	const temp = new ListNode();
	let curr = temp;
	
	while(l1 || l2 || carry){
		let sum = (l1?.val || 0) + (l2?.val || 0) + carry;
		l1 = l1.next;
		l2 = l2.next;
		curr.next = new ListNode(sum%10);
		curr = curr.next;
		
		carry = 0;
		if(sum>9) carry = 1;
	}
	
	return temp.next;
}


Q4 - Remove N-th node from the end of a Linked List

function reverseFunc(head){
	let prev = null, curr = head;
	
	while(curr){
		let currNext = curr.next;
		curr.next = prev;
		prev = curr;
		curr=currNext;
	}
	return prev;
}
